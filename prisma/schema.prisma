// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

  referentialIntegrity = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum Groups {
  GSO
  PITO
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  EquipmentHistory EquipmentHistory[]
  role             Role?
  group            Groups?
  Equipment        Equipment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Equipment {
  id         String   @id @default(uuid())
  name       String
  serial     String
  department String
  issuedTo   String
  usedBy     String
  date       DateTime
  reminder   String?
  userId     String
  status     String
  condition  String

  parts            Parts[]
  equipmentHistory EquipmentHistory[]
  user             User               @relation(fields: [userId], references: [id])
}

model EquipmentHistory {
  id         String   @id @default(uuid())
  name       String
  serial     String
  department String
  issuedTo   String
  usedBy     String
  date       DateTime
  reminder   String?
  status     String
  condition  String

  equiptmentId String
  userId       String

  equiptment   Equipment      @relation(fields: [equiptmentId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id])
  partsHistory PartsHistory[]
}

model Parts {
  id           String @id @default(uuid())
  name         String
  serial       String @unique
  status       String
  equiptmentId String

  equiptment Equipment @relation(fields: [equiptmentId], references: [id], onDelete: Cascade)
}

model PartsHistory {
  id                  String @id @default(uuid())
  name                String
  serial              String
  status              String
  equiptmentHistoryId String

  equiptmentHistory EquipmentHistory @relation(fields: [equiptmentHistoryId], references: [id], onDelete: Cascade)
}
